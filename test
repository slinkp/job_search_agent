#!/bin/bash

# Fix environment for cursor

HERE=$( cd "${0%/*}" 2> /dev/null; echo "$PWD"/ )
source $HERE/.direnv/python-3.13/bin/activate

# TODO - fix why these are needed at import time?
# it messes up tests run by the cursor agent which
# doesn't load my direnv settings.
# Putting these here as a temporary hack.

export TAVILY_API_KEY="test_key"
export OPENAI_API_KEY="test_key"
export SHEET_DOC_ID="sheet_xyz"
export TAB_1_GID='0'  # Main tab for companies
export TAB_1_RANGE='Active!A3:AE'  # Remember ranges are half-open

export TEST_SHEET_DOC_ID='sheet_test_xyz'
export TEST_TAB_1_GID='xyz'
export TEST_TAB_1_RANGE="$TAB_1_RANGE"

# Parse arguments
RUN_PYTHON=false
RUN_JS=false
SKIP_COVERAGE=true
PYTEST_ARGS=()
NPMTEST_ARGS=()
FAIL_FAST=false

# Check each argument
for arg in "$@"; do
    case "$arg" in
        --py|--python)
            RUN_PYTHON=true
            ;;
        --js)
            RUN_JS=true
            ;;
        --all)
            RUN_PYTHON=true
            RUN_JS=true
            ;;
        --no-cover|--without-coverage|--no-coverage)
            SKIP_COVERAGE=true
            ;;
        --cover|--with-coverage)
            SKIP_COVERAGE=false
            ;;
        -x|--exitfirst|--failfast|--bail|-b)
            # Stop on first error in either test runner
            PYTEST_ARGS+=("-x")
            NPMTEST_ARGS+=("--bail" "1")
            FAIL_FAST=true
            SKIP_COVERAGE=true
            ;;
        *)
            # Pass through any other arguments to pytest
            PYTEST_ARGS+=("$arg")
            ;;
    esac
done

# Default behavior: run both if no test type specified
if [ "$RUN_PYTHON" = false ] && [ "$RUN_JS" = false ]; then
    RUN_PYTHON=true
    RUN_JS=true
fi

if [ "$RUN_PYTHON" = true ]; then
    if [ "$SKIP_COVERAGE" = true ]; then
        # Run Python tests without coverage
        python -m pytest "${PYTEST_ARGS[@]}"
        PYTHON_EXIT=$?
    else
        # Run Python tests with coverage (don't show report yet)
        coverage run -m pytest "${PYTEST_ARGS[@]}"
        PYTHON_EXIT=$?
    fi
else
    echo "Skipping python tests"
    PYTHON_EXIT=0
fi

if [[ "$FAIL_FAST" = true && $PYTHON_EXIT -ne 0 ]]; then
    # Don't run if failing fast and already failed
    RUN_JS=false
fi

if [ "$RUN_JS" = true ]; then
    if [ "$SKIP_COVERAGE" = false ]; then
        TEST_CMD="test:coverage"
    else
        TEST_CMD="test"
    fi
    # Run JavaScript tests in UTC timezone
    TZ=UTC npm run "$TEST_CMD" -- --run "${NPMTEST_ARGS[@]}"
    JS_EXIT=$?
else
    echo "Skipping js tests"
    JS_EXIT=0
fi

# Show Python coverage report after all tests (if coverage was enabled)
if [ "$RUN_PYTHON" = true ] && [ "$SKIP_COVERAGE" = false ]; then
    coverage report -m && coverage html
fi

EXIT_CODE=0

echo '=== Test summary ================================================'
echo

if [ "$RUN_PYTHON" = true ]; then
    if [ $PYTHON_EXIT -ne 0 ]; then
        EXIT_CODE=$PYTHON_EXIT
        echo ' !!! Python tests FAILED' >&2
    else
        echo ' Python tests ok'
    fi
else
    echo ' Python tests skipped'
fi

if [ "$RUN_JS" = true ]; then
    if [ $JS_EXIT -ne 0 ]; then
        EXIT_CODE=$JS_EXIT
        echo ' !!! JS tests FAILED' >&2
    else
        echo ' JS tests OK'
    fi
else
    echo ' JS tests skipped'
fi

echo "exiting $EXIT_CODE"
exit $EXIT_CODE
